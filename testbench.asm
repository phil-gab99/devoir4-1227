        addi    $8, $0, 6               # $8(0) = $0(0) + 6 = 6
        sw      $8, 0x10040000($0)      # $8(6) -> M[268697600 + $0(0) = 268697600] Test #1 - addi

        addi    $9, $8, -2              # $9(0) = $8(6) - 2 = 4
        sw      $8, 0x10040000($9)      # $8(6) -> M[268697600 + $9(4) = 268697604] Test #2 - addi and sw

        addi    $9, $0, 1               # $9(4) = $0(0) + 1 = 1
        add     $8, $8, $9              # $8(6) = $8(6) + $9(1) = 7
        sw      $8, 0x10040008($0)      # $8(7) -> M[268697608 + $0(0) = 268697608] Test #3 - add

        and     $8, $8, $9              # $8(7) = $8(7) & $9(1) = 1
        sw      $8, 0x1004000c($0)      # $8(1) -> M[268697612 + $0(0) = 268697612] Test #4 - and

        addi    $8, $8, 4               # $8(1) = $8(1) + 4 = 5
        nor     $8, $8, $9              # $8(5) = ~ ($8(5) | $9(1)) = -6
        sw      $8, 0x10040010($0)      # $8(-6) -> M[268697616 + $0(0) = 268697616] Test #5 - nor

        addi    $8, $0, 2               # $8(-6) = $0(0) + 2 = 2
        or      $8, $8, $9              # $8(2) = $8(2) | $9(1) = 3
        sw      $8, 0x10040014($0)      # $8(3) -> M[268697620 + $0(0) = 268697620] Test #6 - or

        slt     $10, $9, $8             # $10(0) = ($9(1) < $8(3) ? 1 : 0) = 1
        sw      $10, 0x10040018($0)     # $10(1) -> M[268697624 + $0(0) = 268697624] Test #7 - slt

        sll     $8, $8, 2               # $8(3) = $8(3) << 2 = 12
        sw      $8, 0x1004001c($0)      # $8(12) -> M[268697628 + $0(0) = 268697628] Test #8 - sll

        sub     $8, $8, $9              # $8(12) = $8(12) - $9(1) = 11
        sw      $8, 0x10040020($0)      # $8(11) -> M[268697632 + $0(0) = 268697632] Test #9 - sub

        lw      $10, 0x10040020($0)     # $10(1) <- M[268697632 + $0(0) = 268697632] = 11
        sw      $10, 0x10040024($0)     # $10(11) -> M[268697636 + $0(0) = 268697636] Test #10 - lw

        andi    $8, $8, 13              # $8(11) = $8(11) & 13 = 9
        sw      $8, 0x10040028($0)      # $8(9) -> M[268697640 + $0(0) = 268697640] Test #11 - andi

        ori     $8, $8, 3               # $8(9) = $8(9) | 3 = 11
        sw      $8, 0x1004002c($0)      # $8(11) -> M[268697644 + $0(0) = 268697644] Test #12 - ori

        beq     $8, $9, tag1            # if $8(11) == $9(1) goto tag1
        addi    $8, $8, 3               # $8(11) = $8(11) + 3 = 14
tag1:   sw      $8, 0x10040030($0)      # $8(14) -> M[268697648 + $0(0) = 268697648] Test #13 - beq
        add     $8, $0, $9              # $8(14) = $0(0) + $9(1) = 1
        beq     $8, $9, tag2            # if $8(1) == $9(1) goto tag2
        addi    $8, $8, 5               # $8(1) = $8(1) + 5 = 6 EXPTECTED TO SKIP
tag2:   sw      $8, 0x10040034($0)      # $8(1) -> M[268697652 + $0(0) = 268697652] Test #14 - beq

        j       tag3                    # goto tag3
        addi    $8, $8, 5               # $8(1) = $8(1) + 5 = 6 EXPTECTED TO SKIP
tag3:   sw      $8, 0x10040038($0)      # $8(1) -> M[268697656 + $0(0) = 268697656] Test $15 - j

        jal     tag4                    # goto tag4
        addi    $8, $8, 5               # $8(1) = $8(1) + 5 = 6 EXPTECTED TO SKIP ON FIRST RUNTHROUGH
tag4:   sw      $8, 0x1004003c($0)      # $8(1) -> M[268697660 + $0(0) = 268697660] and $8(6) -> M[268697660 + $0(0) = 268697660] Test #16 - jal and jr
        sw      $31, 0x10040040($0)     # $31(4194584) -> M[268697664 + $0(0) = 268697664] Test #17 - jal
        beq     $31, 0x00400118, tag5   # if $31(4194584) == 4194584 goto tag5
        jr      $31                     # goto $31

tag5: