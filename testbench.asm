        addi    $8, $0, 6       # $8(0) = $0(0) + 6 = 6
        sw      $8, 60($0)      # $8(6) -> M[60 + $0(0) = 60] Test #1 - addi

        addi    $9, $8, -5      # $9(0) = $8(6) - 5 = 1
        sw      $8, 60($9)      # $8(6) -> M[60 + $9(1) = 61] Test #2 - addi and sw

        add     $8, $8, $9      # $8(6) = $8(6) + $9(1) = 7
        sw      $8, 62($0)      # $8(7) -> M[62 + $0(0) = 62] Test #3 - add

        and     $8, $8, $9      # $8(7) = $8(7) & $9(1) = 1
        sw      $8, 63($0)      # $8(1) -> M[63 + $0(0) = 63] Test #4 - and

        addi    $8, $8, 4       # $8(1) = $8(1) + 4 = 5
        nor     $8, $8, $9      # $8(5) = ~ ($8(5) | $9(1)) = -6
        sw      $8, 64($0)      # $8(-6) -> M[64 + $0(0) = 64] Test #5 - nor

        addi    $8, $0, 2       # $8(-6) = $0(0) + 2 = 2
        or      $8, $8, $9      # $8(2) = $8(2) | $9(1) = 3
        sw      $8, 65($0)      # $8(3) -> M[65 + $0(0) = 65] Test #6 - or

        slt     $10, $9, $8     # $10(0) = ($9(1) < $8(3) ? 1 : 0) = 1
        sw      $10, 66($0)     # $10(1) -> M[66 + $0(0) = 66] Test #7 - slt

        sll     $8, $8, 2       # $8(3) = $8(3) << 2 = 12
        sw      $8, 67($0)      # $8(12) -> M[67 + $0(0) = 67] Test #8 - sll

        sub     $8, $8, $9      # $8(12) = $8(12) - $9(1) = 11
        sw      $8, 68($0)      # $8(11) -> M[68 + $0(0) = 68] Test #9 - sub

        lw      $10, 68($0)     # $10(1) <- M[68 + $0(0) = 68] = 11
        sw      $10, 69($0)     # $10(11) -> M[69 + $0(0) = 69] Test #10 - lw

        andi    $8, $8, 13      # $8(11) = $8(11) & 13 = 9
        sw      $8, 70($0)      # $8(9) -> M[70 + $0(0) = 70] Test #11 - andi

        ori     $8, $8, 3       # $8(9) = $8(9) | 3 = 11
        sw      $8, 71($0)      # $8(11) -> M[71 + $0(0) = 71] Test #12 - ori

        beq     $8, $9, tag1    # if $8(11) == $9(1) goto tag1
        addi    $8, $8, 3       # $8(11) = $8(11) + 3 = 14
tag1:   sw      $8, 72($0)      # $8(14) -> M[72 + $0(0) = 72] Test #13 - beq
        add     $8, $0, $9      # $8(14) = $0(0) + $9(1) = 1
        beq     $8, $9, tag2    # if $8(1) == $9(1) goto tag2
        addi    $8, $8, 5       # $8(1) = $8(1) + 5 = 6 EXPTECTED TO SKIP
tag2:   sw      $8, 73($0)      # $8(1) -> M[73 + $0(0) = 73] Test #14 - beq

        j       tag3            # goto tag3
        addi    $8, $8, 5       # $8(1) = $8(1) + 5 = 6 EXPTECTED TO SKIP
tag3:   sw      $8, 74($0)      # $8(1) -> M[74 + $0(0) = 74] Test $15 - j

        addi    $9, $0, 0       # $9(1) = $0(0) + 0 = 0
        jal     tag4            # goto tag4
        addi    $8, $8, 5       # $8(1) = $8(1) + 5 = 6 EXPTECTED TO SKIP ON FIRST RUNTHROUGH
tag4:   sw      $8, 75($9)      # $8(1) -> M[75 + $9(0) = 75] and $8(6) -> M[75 + $9(1) = 76] Test #16 - jal and jr
        beq     $8, 6, tag5     # if $8(6) == 6 goto tag5
        addi    $9, $0, 1       # $9(0) = $0(0) + 1 = 1
        jr      $31             # goto $31

tag5:   bNal    $8, tag6        # if $8(6) is negative, goto tag6
        addi    $8, $0, -5      # $8(6) = $0(0) - 5 = -5
tag6:   sw      $8, 77($0)      # $8(-5) -> M[77 + $0(0) = 77] Test #17 - bNal
        bNal    $8, tag7        # if $8(-5) is negative, goto tag7
        addi    $8, $0, 5       # $8(6) = $0(0) - 5 = 5 EXPECTED TO SKIP
tag7:   sw      $8, 78($0)      # $8(-5) -> M[78 + $0(0) = 78] Test #18 - bNal